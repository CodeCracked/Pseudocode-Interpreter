program     : module* EOF



module      : MODULE IDENTIFIER params NEWLINE block END MODULE NEWLINE

block       : (statement)*



statement           : display_statement
					: constant_statement
                    : declare_statement
                    : set_statement
                    : input_statement
                    : call_statement

display_statement   : STATEMENT_KEYWORD(value: Display) value_set NEWLINE

constant_statement	: STATEMENT_KEYWORD(value: Constant) TYPE_KEYWORD IDENTIFIER OPERATOR(value: =) expression NEWLINE

declare_statement   : STATEMENT_KEYWORD(value: Declare) TYPE_KEYWORD IDENTIFIER (OPERATOR(value: =) expression)? NEWLINE

set_statement       : STATEMENT_KEYWORD(value: Set) IDENTIFIER ASSIGN expression NEWLINE

input_statement     : STATEMENT_KEYWORD(value: Input) IDENTIFIER NEWLINE

call_statement		: STATEMENT_KEYWORD(value: Call) IDENTIFIER arguments NEWLINE


value_set   : expression (COMMA expression)*

arguments	: LPAREN value_set? RPAREN

params      : LPAREN (TYPE_KEYWORD REF? IDENTIFIER (COMMA TYPE_KEYWORD REF? IDENTIFIER)*)? RPAREN



expression  : factor ((PLUS|MINUS) factor)*

factor      : exponent ((MUL|DIV|MOD) exponent)*

exponent	: atom (POW atom)*

atom        : INTEGER_LITERAL|REAL_LITERAL|STRING_LITERAL
            : IDENTIFIER
            : MINUS atom
            : LPAREN expression RPAREN