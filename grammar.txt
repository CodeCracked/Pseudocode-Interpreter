program     : module* EOF



module      : MODULE IDENTIFIER params NEWLINE block END MODULE NEWLINE

block       : (statement)*



statement           : display_statement
					: constant_statement
                    : declare_statement
                    : set_statement
                    : input_statement
                    : call_statement
                    : if_statement

display_statement   : STATEMENT_KEYWORD(value: Display) value_set NEWLINE

constant_statement	: STATEMENT_KEYWORD(value: Constant) TYPE_KEYWORD IDENTIFIER OPERATOR(value: =) expression NEWLINE

declare_statement   : STATEMENT_KEYWORD(value: Declare) TYPE_KEYWORD IDENTIFIER (OPERATOR(value: =) expression)? NEWLINE

set_statement       : STATEMENT_KEYWORD(value: Set) IDENTIFIER ASSIGN expression NEWLINE

input_statement     : STATEMENT_KEYWORD(value: Input) IDENTIFIER NEWLINE

call_statement		: STATEMENT_KEYWORD(value: Call) IDENTIFIER arguments NEWLINE

if_statement		: if_clause ((ELSE if_clause)* ELSE NEWLINE block)? END IF NEWLINE

switch_statement	: STATEMENT_KEYWORD(value: Select) expression NEWLINE INDENT case_clause+ DEFAULT NEWLINE INDENT block END STATEMENT_KEYWORD(value: Select)



value_set   : expression (COMMA expression)*

arguments	: LPAREN value_set? RPAREN

params      : LPAREN (TYPE_KEYWORD REF? IDENTIFIER (COMMA TYPE_KEYWORD REF? IDENTIFIER)*)? RPAREN

if_clause	: STATEMENT_KEYWORD(value: If) expression THEN NEWLINE block

case_clause	: CASE expression COLON NEWLINE block



expression	: comp_expr ((AND|OR) comp_expr)*

comp_expr	: NOT comp_expr
			: arith_expr ((EQUAL|NOT_EQUAL|GREATER|LESS|GREATER_EQUAL|LESS_EQUAL) arith_expr)*

arith_expr  : factor ((PLUS|MINUS) factor)*

factor      : exponent ((MUL|DIV|MOD) exponent)*

exponent	: atom (POW atom)*

atom        : INTEGER_LITERAL|REAL_LITERAL|STRING_LITERAL
            : IDENTIFIER
            : MINUS atom
            : LPAREN expression RPAREN